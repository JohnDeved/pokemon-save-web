name: Lua HTTP Server Tests

on:
  # Trigger manually via GitHub UI
  workflow_dispatch:
  
  # Trigger on pull requests that modify Lua files
  pull_request:
    paths:
      - 'scripts/mgba-lua/**/*.lua'
      - 'scripts/mgba-lua/**/*.ts'
      - 'scripts/mgba-lua/**/*.js'
      - 'docker/**'
      - '.github/workflows/lua-tests.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/mgba-test-env

jobs:
  test-lua-server:
    name: Test Lua HTTP Server
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Node.js dependencies
        run: npm ci
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Try to pull pre-built image
        id: pull-image
        run: |
          echo "Attempting to pull pre-built mGBA image..."
          if docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest 2>/dev/null; then
            echo "✅ Successfully pulled pre-built image"
            echo "image_available=true" >> $GITHUB_OUTPUT
            echo "image_source=ghcr" >> $GITHUB_OUTPUT
            # Tag it for local use
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest mgba-test-env:latest
          elif docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main 2>/dev/null; then
            echo "✅ Successfully pulled main branch image"
            echo "image_available=true" >> $GITHUB_OUTPUT
            echo "image_source=ghcr" >> $GITHUB_OUTPUT
            # Tag it for local use
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main mgba-test-env:latest
          else
            echo "⚠️ Pre-built image not available, will build from source"
            echo "image_available=false" >> $GITHUB_OUTPUT
            echo "image_source=build" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true
      
      - name: Start mGBA container for testing (if image available)
        if: steps.pull-image.outputs.image_available == 'true'
        run: |
          echo "Starting mGBA container..."
          docker run -d --name mgba-test \
            -p 7102:7102 \
            -e DISPLAY=:99 \
            -e QT_QPA_PLATFORM=xcb \
            mgba-test-env:latest
          
          # Wait for container to be ready
          echo "Waiting for mGBA HTTP server to be ready..."
          timeout 60s bash -c 'until curl -sf http://localhost:7102/ > /dev/null 2>&1; do sleep 2; done'
          echo "✅ mGBA HTTP server is ready"
      
      - name: Verify mGBA container health (if container started)
        if: steps.pull-image.outputs.image_available == 'true'
        run: |
          echo "Testing mGBA HTTP server endpoints..."
          curl -sf http://localhost:7102/ || { echo "❌ Root endpoint failed"; exit 1; }
          echo "✅ mGBA HTTP server is responding correctly"
      
      - name: Log fallback to Lua mock environment
        if: steps.pull-image.outputs.image_available != 'true'
        run: |
          echo "⚠️ Pre-built mGBA image not available from GHCR"
          echo "🔄 Tests will use Lua mock environment as fallback"
          echo "image_source=lua_mock" >> $GITHUB_OUTPUT
      
      - name: Cache Lua dependencies (backup)
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/lua
            /usr/local/share/lua
          key: ${{ runner.os }}-lua-${{ hashFiles('**/lua-tests.yml') }}
          restore-keys: |
            ${{ runner.os }}-lua-

      - name: Install Lua (backup method)
        id: install-lua
        run: |
          echo "Installing Lua as backup for local tests..."
          if ! command -v lua &> /dev/null; then
            sudo apt-get update
            if sudo apt-get install -y lua5.4 lua5.4-dev luarocks; then
              # Set lua5.4 as the default lua command via alternatives
              sudo update-alternatives --set lua-interpreter /usr/bin/lua5.4 2>/dev/null || true
              # Verify lua command is available and socket library works
              if command -v lua &> /dev/null && lua -e "local socket = require('socket'); print('Socket test successful')"; then
                echo "lua_available=true" >> $GITHUB_OUTPUT
                echo "✅ Lua 5.4 installed successfully"
              else
                echo "lua_available=false" >> $GITHUB_OUTPUT
                echo "⚠️ Lua socket installation failed"
              fi
            else
              echo "lua_available=false" >> $GITHUB_OUTPUT
              echo "⚠️ Lua installation failed"
            fi
          else
            echo "lua_available=true" >> $GITHUB_OUTPUT
            echo "✅ Lua already installed"
          fi
        continue-on-error: true
      
      - name: Run Lua HTTP Server integration tests
        run: |
          echo "Running Lua HTTP Server integration tests..."
          echo "Image source: ${{ steps.pull-image.outputs.image_source }}"
          npm run test:run scripts/mgba-lua/__tests__/lua-http-server.integration.test.ts
        env:
          # Ensure tests run in CI environment
          CI: true
          # Make container available for tests
          MGBA_HTTP_URL: http://localhost:7102
      
      - name: Container logs (if tests fail and container was started)
        if: failure() && steps.pull-image.outputs.image_available == 'true'
        run: |
          echo "=== mGBA Container Logs ==="
          docker logs mgba-test || echo "No container logs available"
      
      - name: Stop mGBA container (if started)
        if: always() && steps.pull-image.outputs.image_available == 'true'
        run: |
          docker stop mgba-test || true
          docker rm mgba-test || true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lua-test-results
          path: |
            test-results.xml
            coverage/
          retention-days: 7
