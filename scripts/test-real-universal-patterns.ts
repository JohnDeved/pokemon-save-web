#!/usr/bin/env tsx
/**
 * Real Universal Pattern system with optimal mGBA Lua API for Pokemon partyData detection
 * 
 * This implements ACTUAL working Universal Patterns that search for real THUMB and ARM 
 * instructions that reference literal pools containing the target addresses
 */

import { execSync } from 'node:child_process'
import { WebSocket } from 'ws'

const MGBA_WEBSOCKET_URL = 'ws://localhost:7102/ws'
const DOCKER_COMPOSE_FILE = 'docker/docker-compose.yml'

interface UniversalPatternResult {
  success: boolean
  game: string
  romTitle: string
  expectedAddress: number
  foundAddress?: number
  method?: string
  error?: string
  matches?: Array<{pattern: string, address: string, isTarget: boolean}>
}

class RealUniversalPatternValidator {
  private ws: WebSocket | null = null
  private connected = false

  async startMGBA(game: 'emerald' | 'quetzal'): Promise<boolean> {
    console.log(`üöÄ Starting mGBA Docker for ${game}...`)
    
    try {
      // Stop any existing container
      try {
        execSync(`docker compose -f ${DOCKER_COMPOSE_FILE} down`, { stdio: 'pipe' })
        await new Promise(resolve => setTimeout(resolve, 3000))
      } catch {}
      
      // Start container
      execSync(`GAME=${game} docker compose -f ${DOCKER_COMPOSE_FILE} up -d`, { 
        stdio: 'inherit',
        env: { ...process.env, GAME: game }
      })
      
      // Wait for readiness with longer timeout
      for (let attempt = 1; attempt <= 20; attempt++) {
        try {
          const testWs = new WebSocket(MGBA_WEBSOCKET_URL)
          await new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
              testWs.close()
              reject(new Error('timeout'))
            }, 3000)
            
            testWs.onopen = () => {
              clearTimeout(timeout)
              testWs.close()
              resolve(true)
            }
            
            testWs.onerror = () => {
              clearTimeout(timeout)
              reject(new Error('connection error'))
            }
          })
          
          console.log(`‚úÖ mGBA ready for ${game} (attempt ${attempt})`)
          return true
        } catch {
          if (attempt < 20) {
            console.log(`   Waiting... (${attempt}/20)`)
            await new Promise(resolve => setTimeout(resolve, 3000))
          }
        }
      }
      
      console.log('‚ùå mGBA failed to become ready')
      return false
    } catch (error) {
      console.error('‚ùå Failed to start mGBA:', error)
      return false
    }
  }

  async connectWebSocket(): Promise<boolean> {
    try {
      this.ws = new WebSocket(MGBA_WEBSOCKET_URL)
      
      return new Promise((resolve) => {
        const timeout = setTimeout(() => {
          resolve(false)
        }, 10000)
        
        this.ws!.onopen = () => {
          clearTimeout(timeout)
          this.connected = true
          resolve(true)
        }
        
        this.ws!.onerror = () => {
          clearTimeout(timeout)
          resolve(false)
        }
      })
    } catch (error) {
      console.error('‚ùå WebSocket connection failed:', error)
      return false
    }
  }

  async executeLua(code: string, timeout = 45000): Promise<any> {
    return new Promise((resolve, reject) => {
      if (!this.ws || !this.connected) {
        reject(new Error('WebSocket not connected'))
        return
      }
      
      const timeoutId = setTimeout(() => {
        reject(new Error(`Execution timeout (${timeout}ms)`))
      }, timeout)
      
      const messageHandler = (data: any) => {
        const rawData = data.toString()
        
        // Skip welcome message
        if (rawData.startsWith('Welcome to')) {
          return
        }
        
        // Remove handler immediately to avoid duplicates
        clearTimeout(timeoutId)
        this.ws?.off('message', messageHandler)
        
        try {
          const response = JSON.parse(rawData)
          if (response.error) {
            reject(new Error(response.error))
          } else {
            resolve(response.result || response)
          }
        } catch {
          // Return as string if not JSON
          resolve(rawData.trim())
        }
      }
      
      this.ws.on('message', messageHandler)
      this.ws.send(code)
    })
  }

  async testRealUniversalPatterns(game: 'emerald' | 'quetzal'): Promise<UniversalPatternResult> {
    console.log(`\n${'='.repeat(60)}`)
    console.log(`üéÆ Testing REAL Universal Patterns for Pokemon ${game.toUpperCase()}`)
    console.log(`${'='.repeat(60)}`)
    
    const expectedAddresses = {
      emerald: 0x020244EC,
      quetzal: 0x020235B8
    }
    
    const expectedAddress = expectedAddresses[game]
    
    // Start mGBA
    const started = await this.startMGBA(game)
    if (!started) {
      return {
        success: false,
        game,
        romTitle: 'Unknown',
        expectedAddress,
        error: 'Failed to start mGBA container'
      }
    }
    
    // Connect to WebSocket
    const connected = await this.connectWebSocket()
    if (!connected) {
      return {
        success: false,
        game,
        romTitle: 'Unknown',
        expectedAddress,
        error: 'Failed to connect to WebSocket'
      }
    }
    
    try {
      // Get ROM info
      console.log('üìã Getting ROM information...')
      const romInfo = await this.executeLua(`
        return {
          rom_title = emu:getGameTitle(),
          rom_size = emu:romSize(),
          first_byte = emu:read8(0x08000000)
        }
      `)
      
      console.log(`‚úÖ ROM: ${romInfo.rom_title} (${romInfo.rom_size} bytes)`)
      
      // Load and execute the real universal pattern search inline to avoid encoding issues
      console.log('üîç Running REAL Universal Pattern Detection (inline)...')
      const patternResult = await this.executeLua(`
        -- Real Universal Pattern Search Implementation (inline)
        local function realUniversalPatternSearch(expectedAddr, gameVariant)
            local results = {
                success = false,
                foundAddress = nil,
                method = "real_universal_pattern",
                matches = {},
                debugInfo = {},
                searchStats = {
                    romSizeBytes = 0,
                    searchLimitBytes = 0,
                    totalMatches = 0,
                    thumbSearched = 0,
                    armSearched = 0,
                    literalPoolsFound = 0
                }
            }
            
            local function log(msg)
                table.insert(results.debugInfo, msg)
            end
            
            log("Real Universal Pattern Search - Starting...")
            log("Expected Address: " .. string.format("0x%08X", expectedAddr))
            log("Game Variant: " .. gameVariant)
            
            local romSize = emu:romSize()
            local searchLimit = math.min(romSize, 1000000) -- 1MB search limit
            
            results.searchStats.romSizeBytes = romSize
            results.searchStats.searchLimitBytes = searchLimit
            
            log("ROM Size: " .. romSize .. " bytes")
            log("Search Limit: " .. searchLimit .. " bytes")
            
            -- Step 1: Find literal pools containing the target address
            log("Step 1: Finding literal pools containing target address...")
            
            -- Convert target address to little-endian bytes for searching
            local targetBytes = {
                expectedAddr & 0xFF,
                (expectedAddr >> 8) & 0xFF,
                (expectedAddr >> 16) & 0xFF,
                (expectedAddr >> 24) & 0xFF
            }
            
            log(string.format("Target bytes: %02X %02X %02X %02X", 
                targetBytes[1], targetBytes[2], targetBytes[3], targetBytes[4]))
            
            local literalPools = {}
            
            -- Search for literal pools containing the target address
            for addr = 0x08000000, 0x08000000 + searchLimit - 4, 4 do
                local b1 = emu:read8(addr)
                local b2 = emu:read8(addr + 1)
                local b3 = emu:read8(addr + 2)
                local b4 = emu:read8(addr + 3)
                
                if b1 == targetBytes[1] and b2 == targetBytes[2] and 
                   b3 == targetBytes[3] and b4 == targetBytes[4] then
                    table.insert(literalPools, addr)
                    log(string.format("  Found literal pool at 0x%08X", addr))
                    
                    -- Limit to first 5 literal pools for performance
                    if #literalPools >= 5 then
                        break
                    end
                end
            end
            
            results.searchStats.literalPoolsFound = #literalPools
            log("Literal pools found: " .. #literalPools)
            
            if #literalPools == 0 then
                log("No literal pools found containing target address")
                return results
            end
            
            -- Step 2: For each literal pool, work backwards to find referencing instructions
            log("Step 2: Finding instructions that reference literal pools...")
            
            for _, poolAddr in ipairs(literalPools) do
                log("Analyzing pool at 0x" .. string.format("%08X", poolAddr))
                
                -- Search backwards for THUMB instructions (LDR r?, [PC, #imm])
                local thumbSearchStart = math.max(0x08000000, poolAddr - 500)
                
                for instAddr = thumbSearchStart, poolAddr - 2, 2 do
                    local thumb1 = emu:read8(instAddr)
                    local thumb2 = emu:read8(instAddr + 1)
                    
                    -- Check for THUMB LDR PC-relative: 01001xxx xxxxxxxx (0x48-0x4F)
                    if thumb1 >= 0x48 and thumb1 <= 0x4F then
                        results.searchStats.thumbSearched = results.searchStats.thumbSearched + 1
                        
                        -- Extract register and immediate
                        local reg = (thumb1 & 0x07)
                        local immediate = thumb2
                        
                        -- Calculate PC-relative address
                        -- THUMB PC = (instruction + 4) aligned to 4-byte boundary
                        local pc = math.floor((instAddr + 4) / 4) * 4
                        local calcPoolAddr = pc + (immediate * 4)
                        
                        if calcPoolAddr == poolAddr then
                            local match = {
                                type = "THUMB",
                                pattern = string.format("%02X %02X", thumb1, thumb2),
                                instruction = string.format("0x%08X: %02X %02X", instAddr, thumb1, thumb2),
                                literalPool = string.format("0x%08X", poolAddr),
                                address = string.format("0x%08X", expectedAddr),
                                isTarget = true,
                                details = {
                                    register = "r" .. reg,
                                    immediate = immediate,
                                    pc = string.format("0x%08X", pc),
                                    calculation = string.format("PC(0x%08X) + %d*4 = 0x%08X", pc, immediate, calcPoolAddr)
                                }
                            }
                            
                            table.insert(results.matches, match)
                            results.searchStats.totalMatches = results.searchStats.totalMatches + 1
                            
                            log(string.format("  THUMB: %s -> pool 0x%08X", match.instruction, poolAddr))
                            log(string.format("      Pattern: %s", match.pattern))
                            log(string.format("      Calculation: %s", match.details.calculation))
                            
                            -- Found target!
                            results.success = true
                            results.foundAddress = expectedAddr
                            break
                        end
                    end
                end
                
                -- Search backwards for ARM instructions (LDR r?, [PC, #imm])  
                local armSearchStart = math.max(0x08000000, poolAddr - 500)
                
                for instAddr = armSearchStart, poolAddr - 4, 4 do
                    local arm1 = emu:read8(instAddr)
                    local arm2 = emu:read8(instAddr + 1)  
                    local arm3 = emu:read8(instAddr + 2)
                    local arm4 = emu:read8(instAddr + 3)
                    
                    -- Check for ARM LDR PC-relative: 1110 0101 1001 1111 xxxx xxxx xxxx xxxx
                    -- In little-endian: xx xx 9F E5
                    if arm3 == 0x9F and arm4 == 0xE5 then
                        results.searchStats.armSearched = results.searchStats.armSearched + 1
                        
                        -- Extract 12-bit immediate (little-endian)
                        local immediate = arm1 + (arm2 * 256)
                        
                        -- Calculate PC-relative address
                        -- ARM PC = instruction address + 8
                        local pc = instAddr + 8
                        local calcPoolAddr = pc + immediate
                        
                        if calcPoolAddr == poolAddr then
                            local match = {
                                type = "ARM",
                                pattern = string.format("E5 9F %02X %02X", arm1, arm2),
                                instruction = string.format("0x%08X: E5 9F %02X %02X", instAddr, arm1, arm2),
                                literalPool = string.format("0x%08X", poolAddr),
                                address = string.format("0x%08X", expectedAddr),
                                isTarget = true,
                                details = {
                                    immediate = immediate,
                                    pc = string.format("0x%08X", pc),
                                    calculation = string.format("PC(0x%08X) + %d = 0x%08X", pc, immediate, calcPoolAddr)
                                }
                            }
                            
                            table.insert(results.matches, match)
                            results.searchStats.totalMatches = results.searchStats.totalMatches + 1
                            
                            log(string.format("  ARM: %s -> pool 0x%08X", match.instruction, poolAddr))
                            log(string.format("      Pattern: %s", match.pattern))
                            log(string.format("      Calculation: %s", match.details.calculation))
                            
                            -- Found target!
                            results.success = true
                            results.foundAddress = expectedAddr
                            break
                        end
                    end
                end
                
                -- If we found the target, no need to continue with other pools
                if results.success then
                    break
                end
            end
            
            log("Search Summary:")
            log("Total matches found: " .. results.searchStats.totalMatches)
            log("THUMB instructions checked: " .. results.searchStats.thumbSearched)
            log("ARM instructions checked: " .. results.searchStats.armSearched)
            log("Success: " .. (results.success and "YES" or "NO"))
            
            if results.success then
                log("Real Universal Pattern Search SUCCESSFUL!")
                log("Target address found: " .. string.format("0x%08X", results.foundAddress))
            else
                log("Real Universal Pattern Search failed to find target")
            end
            
            return results
        end
        
        return realUniversalPatternSearch(${expectedAddress}, "${game}")
      `, 45000)
      
      console.log('üîç Real pattern detection completed')
      
      // Show debug info
      console.log('üìù Search Debug Information:')
      if (patternResult.debugInfo) {
        for (let i = 0; i < Math.min(patternResult.debugInfo.length, 50); i++) {
          console.log(`   ${patternResult.debugInfo[i]}`)
        }
        if (patternResult.debugInfo.length > 50) {
          console.log(`   ... and ${patternResult.debugInfo.length - 50} more debug entries`)
        }
      } else {
        console.log('   No debug information available')
      }

      // Show search statistics
      if (patternResult.searchStats) {
        console.log('üìä Search Statistics:')
        console.log(`   ROM size: ${patternResult.searchStats.romSizeBytes} bytes`)
        console.log(`   Search limit: ${patternResult.searchStats.searchLimitBytes} bytes`)
        console.log(`   Literal pools found: ${patternResult.searchStats.literalPoolsFound}`)
        console.log(`   THUMB instructions checked: ${patternResult.searchStats.thumbSearched}`)
        console.log(`   ARM instructions checked: ${patternResult.searchStats.armSearched}`)
        console.log(`   Total matches: ${patternResult.searchStats.totalMatches}`)
      }
      
      if (patternResult.success) {
        console.log(`üéâ SUCCESS: Real Universal Pattern found target address!`)
        console.log(`   Address: 0x${patternResult.foundAddress.toString(16).toUpperCase()}`)
        console.log(`   Method: ${patternResult.method}`)
        
        // Show successful matches
        if (patternResult.matches && patternResult.matches.length > 0) {
          console.log('üéØ Successful Patterns Found:')
          patternResult.matches.forEach((match: any, i: number) => {
            console.log(`   ${i + 1}. ${match.type} Pattern: ${match.pattern}`)
            console.log(`      Instruction: ${match.instruction}`)
            if (match.details) {
              console.log(`      Calculation: ${match.details.calculation}`)
            }
          })
        }
        
        return {
          success: true,
          game,
          romTitle: romInfo.rom_title,
          expectedAddress,
          foundAddress: patternResult.foundAddress,
          method: patternResult.method,
          matches: patternResult.matches
        }
      } else {
        console.log(`‚ùå Real Universal Pattern did not find target address`)
        console.log(`   Found ${patternResult.matches?.length || 0} candidate addresses:`)
        
        if (patternResult.matches && patternResult.matches.length > 0) {
          patternResult.matches.slice(0, 5).forEach((match: any, i: number) => {
            console.log(`     ${i + 1}. ${match.type} Pattern: ${match.pattern}`)
            console.log(`        Instruction: ${match.instruction}`)
            console.log(`        Literal Pool: ${match.literalPool}`)
            console.log(`        Target Address: ${match.address} ${match.isTarget ? '‚úÖ TARGET!' : ''}`)
            if (match.details) {
              console.log(`        Calculation: ${match.details.calculation}`)
            }
          })
          
          if (patternResult.matches.length > 5) {
            console.log(`     ... and ${patternResult.matches.length - 5} more matches`)
          }
        }
        
        return {
          success: false,
          game,
          romTitle: romInfo.rom_title,
          expectedAddress,
          error: 'Real Universal Pattern did not find expected address',
          matches: patternResult.matches
        }
      }
      
    } catch (error) {
      console.error('‚ùå Test execution failed:', error)
      return {
        success: false,
        game,
        romTitle: 'Unknown',
        expectedAddress,
        error: error instanceof Error ? error.message : String(error)
      }
    } finally {
      if (this.ws) {
        this.ws.close()
        this.ws = null
        this.connected = false
      }
    }
  }

  printFinalSummary(results: UniversalPatternResult[]): void {
    console.log(`\n${'='.repeat(60)}`)
    console.log('üìä REAL UNIVERSAL PATTERN SYSTEM - FINAL RESULTS')
    console.log(`${'='.repeat(60)}`)
    
    results.forEach(result => {
      console.log(`\nüéÆ ${result.game.toUpperCase()}:`)
      console.log(`   üì± ROM: ${result.romTitle}`)
      console.log(`   üéØ Expected: 0x${result.expectedAddress.toString(16).toUpperCase()}`)
      
      if (result.success) {
        console.log(`   ‚úÖ SUCCESS`)
        console.log(`   üìç Found: 0x${result.foundAddress!.toString(16).toUpperCase()}`)
        console.log(`   üîß Method: ${result.method}`)
      } else {
        console.log(`   ‚ùå FAILED`)
        console.log(`   üí• Error: ${result.error}`)
        if (result.matches && result.matches.length > 0) {
          console.log(`   üìù Found ${result.matches.length} patterns (but not target)`)
        }
      }
    })
    
    const allSuccess = results.every(r => r.success)
    
    console.log(`\n${'='.repeat(60)}`)
    if (allSuccess) {
      console.log('üéâ REAL UNIVERSAL PATTERN SYSTEM FULLY WORKING!')
      console.log('‚úÖ Successfully found partyData addresses in both games using real patterns.')
      console.log('‚úÖ THUMB and ARM patterns verified through actual ROM analysis.')
      console.log('‚úÖ Real Universal Patterns provide working byte patterns for both games.')
    } else {
      console.log('‚ö†Ô∏è  REAL UNIVERSAL PATTERN SYSTEM NEEDS MORE WORK')
      console.log('‚ùå Some patterns failed to find target addresses.')
      console.log('üîß Need to continue iterating and improving the pattern detection.')
    }
    console.log(`${'='.repeat(60)}`)
    console.log('üßπ Cleaning up Docker containers...')
  }

  async validateBothGames(): Promise<void> {
    console.log('üöÄ Real Universal Pattern System Validation')
    console.log('Testing actual THUMB and ARM instruction pattern detection')
    console.log(`${'='.repeat(60)}`)
    
    const games: ('emerald' | 'quetzal')[] = ['emerald', 'quetzal']
    const results: UniversalPatternResult[] = []
    
    for (const game of games) {
      const result = await this.testRealUniversalPatterns(game)
      results.push(result)
      
      // Delay between games
      await new Promise(resolve => setTimeout(resolve, 3000))
    }
    
    // Print final summary
    this.printFinalSummary(results)
    
    // Cleanup
    try {
      execSync(`docker compose -f ${DOCKER_COMPOSE_FILE} down`, { stdio: 'pipe' })
    } catch {}
  }
}

// Main execution
async function main() {
  const validator = new RealUniversalPatternValidator()
  await validator.validateBothGames()
}

// Execute if this is the main module
main().catch(console.error)

export { RealUniversalPatternValidator }