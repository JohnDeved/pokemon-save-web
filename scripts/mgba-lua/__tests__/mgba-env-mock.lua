#!/usr/bin/env lua5.3
local socket=require'socket';local port=tonumber(arg[1])or 7102;_G.console={log=function(_,msg)print("[CONSOLE] "..msg);io.flush()end,error=function(_,msg)print("[ERROR] "..msg);io.flush()end}
_G.socket={ERRORS={AGAIN="again",ADDRESS_IN_USE="address already in use"},_server=nil,_clients={},_running=false,bind=function(host,port)local s=socket.tcp();if not s then return nil,"Failed to create socket"end;s:setoption("reuseaddr",true)
local ok,err=s:bind(host or"127.0.0.1",port);if not ok then s:close();return nil,err:find("already in use")and _G.socket.ERRORS.ADDRESS_IN_USE or err end
_G.socket._server={_socket=s,_callbacks={},add=function(_,event,cb)_G.socket._server._callbacks[event]=cb end,listen=function()local ok,err=s:listen(5);if not ok then return nil,err end;s:settimeout(0);_G.socket._running=true;return true end,accept=function()local c=_G.socket._clients[1];if c then table.remove(_G.socket._clients,1);return c end;return nil,_G.socket.ERRORS.AGAIN end,close=function()_G.socket._running=false;return s:close()end};return _G.socket._server end}
_G.emu={romSize=function()return 1048576 end};_G.callbacks={add=function(_,event,cb)if event=="start"then cb()end;return 1 end,remove=function()end}
print("Starting simplified mGBA environment on port "..port);local f=io.open((arg[0]:match("(.+)/[^/]+$")or".").."/../http-server.lua","r");if not f then print("ERROR: http-server.lua not found");os.exit(1)end
local chunk=load(f:read("*all"):gsub("app:listen%(7102","app:listen("..port),"http-server.lua");f:close();if not chunk or not pcall(chunk)then print("ERROR: Failed to load/execute");os.exit(1)end;print("HTTP server loaded successfully")
for i=1,50000 do if not _G.socket._running then break end;local c=_G.socket._server._socket:accept();if c then c:settimeout(1);local data="";repeat local ch=c:receive(1);if ch then data=data..ch;if data:find("\r\n\r\n")then local len=data:match("content%-length:%s*(%d+)");if not len or#data>=data:find("\r\n\r\n")+3+tonumber(len)then break end end end;until not ch or#data>2048
if#data>0 then table.insert(_G.socket._clients,{_socket=c,_callbacks={},_buffer=data,add=function(self,event,cb)self._callbacks[event]=cb;if event=="received"and#self._buffer>0 then cb()end end,receive=function(self)if#self._buffer>0 then local r=self._buffer;self._buffer="";return r end;return nil,_G.socket.ERRORS.AGAIN end,send=function(self,d)return self._socket:send(d)end,close=function(self)self._socket:close()end});if _G.socket._server._callbacks.received then _G.socket._server._callbacks.received()end else c:close()end end;socket.sleep(0.001)end;print("Event loop ended")